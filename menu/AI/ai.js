(function () {
    // Global state
    const state = {
        messageForm: null,
        messageInput: null,
        chatMessages: null
    };

    // Configuration de l'API Groq
    const GROQ_API_KEY = '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';
    const API_URL = 'https://api.groq.com/openai/v1/chat/completions';

    // V√©rification de la cl√© API
    if (!GROQ_API_KEY.startsWith('gsk_')) {
        console.error('Cl√© API Groq invalide');
        addMessage('Erreur: Cl√© API non valide', false);
    }

    const emojiResponses = {
        salut: {
            emoji: "üëã",
            content: "Bonjour ! Comment puis-je vous aider aujourd'hui ?"
        },
        merci: {
            emoji: "üôè",
            content: "Je vous en prie ! N'h√©sitez pas si vous avez d'autres questions."
        },
        error: {
            emoji: "‚ö†Ô∏è",
            content: "D√©sol√©, une erreur s'est produite."
        },
        code: {
            emoji: "üíª",
            content: "Voici un exemple de code :"
        },
        conseil: {
            emoji: "üí°",
            content: "Voici un conseil utile :"
        },
        success: {
            emoji: "‚úÖ",
            content: "Op√©ration r√©ussie !"
        }
    };

    // Modifier systemPrompt pour inclure les emojis
    const systemPrompt = `
    Tu es une intelligence artificielle avanc√©e d√©velopp√©e par OpenAI, capable de traiter une grande vari√©t√© de demandes (recherche, explication, r√©sum√©, analyse, traduction, aide √† l‚Äô√©criture, etc.) avec rigueur, clart√© et p√©dagogie.

√Ä partir de maintenant, adopte par d√©faut un style de r√©ponse structur√©, professionnel, clair et p√©dagogique, comme si tu √©tais un expert qui souhaite que chaque r√©ponse soit utile, fiable et compr√©hensible, m√™me pour un non-sp√©cialiste.

Structure chaque r√©ponse quand c‚Äôest pertinent comme ceci :
1. Introduction ‚Äì Br√®ve pr√©sentation du sujet ou du contexte.
2. Explication d√©taill√©e ‚Äì Analyse claire, logique et progressive.
3. Conclusion ou synth√®se ‚Äì R√©sum√© de ce qu‚Äôil faut retenir, recommandation √©ventuelle ou proposition d‚Äôaction.

Si je te demande une traduction, fais toujours appara√Ætre :
	‚Ä¢	Le texte original,
	‚Ä¢	La traduction,
	‚Ä¢	Une br√®ve explication linguistique ou culturelle si n√©cessaire (par exemple : tournure idiomatique, faux amis, double sens, etc.).

Tu dois :
	‚Ä¢	Toujours adapter ton niveau de langage √† la demande, mais rester neutre, professionnel et clair par d√©faut.
	‚Ä¢	Donner une d√©finition simple pour tout mot ou concept technique, sauf si je te demande de faire plus court.
	‚Ä¢	Indiquer si ton avis est objectif (fond√© sur des faits) ou subjectif (fond√© sur des pr√©f√©rences ou interpr√©tations).
	‚Ä¢	√ätre synth√©tique mais complet : va √† l‚Äôessentiel, mais n‚Äôomets pas les √©l√©ments importants.
	‚Ä¢	Me poser des questions de clarification si besoin au lieu de supposer.

Tu es l√† pour m‚Äôaccompagner, m‚Äô√©clairer et m‚Äôassister, sans jamais me donner de fausses informations.
Sauf si je te demande explicitement un autre style (ex : humour, informalit√©, format court), reste dans ce mode par d√©faut tout au long de notre conversation, quel que soit le sujet.
   Voici quelques exemples d'utilisation d'emojis :
üí° Pour les conseils et suggestions
‚ö†Ô∏è Pour les avertissements
‚úÖ Pour les confirmations
‚ùå Pour les erreurs
üíª Pour le code
üìù Pour les explications
üîç Pour les recherches
üéØ Pour les objectifs
Reste professionnel et concis dans tes r√©ponses.`;

    function addMessage(content, isUser = false) {
        const wrapperDiv = document.createElement('div');
        wrapperDiv.className = `message-wrapper ${isUser ? 'user-wrapper' : ''}`;

        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;

        const iconDiv = document.createElement('div');
        iconDiv.className = 'message-icon';
        iconDiv.innerHTML = isUser ? '<i class="fas fa-user"></i>' : '<i class="fas fa-robot"></i>';

        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';

        // Format le contenu avec Markdown et coloration syntaxique
        if (!isUser) {
            content = formatMessage(content);
        }

        // Ajouter un emoji au d√©but du message si c'est un message AI
        if (!isUser) {
            // Chercher un emoji au d√©but du message ou utiliser ü§ñ par d√©faut
            const emojiRegex = /^(\p{Emoji})/u;
            const hasEmoji = emojiRegex.test(content);
            if (!hasEmoji) {
                content = "ü§ñ " + content;
            }
        }

        contentDiv.innerHTML = content;

        // Ajout des actions
        const actionsDiv = document.createElement('div');
        actionsDiv.className = 'message-actions';

        if (isUser) {
            actionsDiv.innerHTML = `
                <button class="message-action-btn" data-tooltip="Modifier" onclick="editMessage(this)">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="message-action-btn" data-tooltip="Supprimer" onclick="deleteMessage(this)">
                    <i class="fas fa-trash"></i>
                </button>`;
        } else {
            actionsDiv.innerHTML = `
                <button class="message-action-btn" data-tooltip="Copier" onclick="copyMessage(this)">
                    <i class="fas fa-copy"></i>
                </button>
                <button class="message-action-btn" data-tooltip="Partager" onclick="shareMessage(this)">
                    <i class="fas fa-share"></i>
                </button>`;
        }

        messageDiv.appendChild(iconDiv);
        messageDiv.appendChild(contentDiv);
        messageDiv.appendChild(actionsDiv);
        wrapperDiv.appendChild(messageDiv);
        state.chatMessages.appendChild(wrapperDiv);
        state.chatMessages.scrollTop = state.chatMessages.scrollHeight;

        if (window.Prism) {
            Prism.highlightAllUnder(contentDiv);
        }
    }

    // Actions
    window.editMessage = function (button) {
        const messageContent = button.closest('.message').querySelector('.message-content');
        messageContent.contentEditable = true;
        messageContent.focus();

        messageContent.addEventListener('keydown', function (e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                messageContent.contentEditable = false;
            }
        });
    };

    window.deleteMessage = function (button) {
        if (confirm('Voulez-vous vraiment supprimer ce message ?')) {
            button.closest('.message-wrapper').remove();
        }
    };

    window.copyMessage = function (button) {
        const text = button.closest('.message').querySelector('.message-content').textContent;
        navigator.clipboard.writeText(text).then(() => {
            const originalTooltip = button.getAttribute('data-tooltip');
            button.setAttribute('data-tooltip', 'Copi√© !');
            setTimeout(() => {
                button.setAttribute('data-tooltip', originalTooltip);
            }, 2000);
        });
    };

    window.shareMessage = function (button) {
        const text = button.closest('.message').querySelector('.message-content').textContent;
        if (navigator.share) {
            navigator.share({ text });
        }
    };

    function formatMessage(content) {
        content = escapeHtml(content);

        content = content.replace(/```(\w+)?\n([\s\S]*?)```/g, (match, lang, code) => {
            const language = lang || 'plaintext';
            return `<pre><code class="language-${language}" contenteditable="false">${code.trim()}</code></pre>`;
        });

        content = content.replace(/`([^`]+)`/g, '<code contenteditable="false">$1</code>');

        content = content.replace(/^\s*-\s+(.+)$/gm, '<li>$1</li>');
        content = content.replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>');

        content = content.replace(/^###\s+(.+)$/gm, '<h3>$1</h3>');
        content = content.replace(/^##\s+(.+)$/gm, '<h2>$1</h2>');
        content = content.replace(/^#\s+(.+)$/gm, '<h1>$1</h1>');

        content = content.replace(
            /(https?:\/\/[^\s]+)/g,
            '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>'
        );

        content = content.replace(/\n/g, '<br>');

        return content;
    }

    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    async function handleSubmit(e) {
        e.preventDefault();
        const message = state.messageInput.value.trim();
        if (!message) return;

        addMessage(message, true);
        state.messageInput.value = '';
        addLoadingIndicator();

        try {
            const response = await fetch(API_URL, {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${GROQ_API_KEY}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    model: "gemma2-9b-it",
                    messages: [
                        { role: "system", content: systemPrompt },
                        { role: "user", content: message }
                    ],
                    temperature: 0.7,
                    max_tokens: 4096,
                    stream: false
                })
            });

            removeLoadingIndicator();

            if (!response.ok) {
                const errorData = await response.json();
                console.error('Erreur API d√©taill√©e:', errorData);
                throw new Error(errorData.error?.message || `HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            if (data?.choices?.[0]?.message?.content) {
                addMessage(data.choices[0].message.content, false);
            } else {
                throw new Error('Format de r√©ponse invalide');
            }
        } catch (error) {
            removeLoadingIndicator();
            console.error('Erreur d√©taill√©e:', error);
            addMessage(`Une erreur est survenue : ${error.message}`, false);
        }
    }

    function addLoadingIndicator() {
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'message-wrapper';
        loadingDiv.innerHTML = `
            <div class="message ai-message" id="loadingMessage">
                <div class="message-icon"><i class="fas fa-robot"></i></div>
                <div class="message-content">
                    En train de r√©fl√©chir
                    <div class="loading-dots">
                        <span></span><span></span><span></span>
                    </div>
                </div>
            </div>`;
        state.chatMessages.appendChild(loadingDiv);
        state.chatMessages.scrollTop = state.chatMessages.scrollHeight;
    }

    function removeLoadingIndicator() {
        const loadingMessage = document.getElementById('loadingMessage');
        if (loadingMessage) {
            loadingMessage.closest('.message-wrapper').remove();
        }
    }

    function initializeChat() {
        state.messageForm = document.getElementById('messageForm');
        state.messageInput = document.getElementById('messageInput');
        state.chatMessages = document.getElementById('chatMessages');

        if (state.messageForm && state.messageInput) {
            state.messageForm.addEventListener('submit', handleSubmit);
            state.messageInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    handleSubmit(e);
                }
            });
        }
    }

    // Initialisation au chargement de la page
    document.addEventListener('DOMContentLoaded', initializeChat);
})();
